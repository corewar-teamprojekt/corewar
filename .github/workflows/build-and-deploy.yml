name: "Build and Test"
on:
  push:

env:
    IMAGE_NAME: aio
    IMAGE_TAGS: ${{ github.ref_name }} ${{ github.sha }}
    IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
    REGISTRY_USER: ${{ github.actor }}
    REGISTRY_PASSWORD: ${{ github.token }}

jobs:
  e2e-tests:
    name: "Run E2E playwright tests"
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*

    - name: Install dependencies
      working-directory: e2e
      run: npm ci

    - name: Install Playwright Browsers
      working-directory: e2e
      run: npx playwright install --with-deps

    - name: Run Playwright tests
      working-directory: e2e
      run: npx playwright test

    - uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  build-frontend:
    name: "Build and Test Frontend"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*

    - name: Install dependencies
      working-directory: frontend/app
      run: | 
          npm ci
          npm install @microsoft/eslint-formatter-sarif@3.1.0

    - name: Run Prettier
      working-directory: frontend/app
      run: npx prettier --check src

    - name: Run ESLint
      env:
        SARIF_ESLINT_IGNORE_SUPPRESSED: "true"
      working-directory: frontend/app
      run: npx eslint src
        --format @microsoft/eslint-formatter-sarif
        --output-file eslint-results.sarif

    - name: Build project
      working-directory: frontend/app
      run: npm run build

    - name: Archive production artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: |
          frontend/app/dist

    - name: Run unit tests
      working-directory: frontend/app
      run: npm test

  build-backend:
    name: "Build and Test Backend"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Run Format Check, Tests and Build
        working-directory: backend/
        run: ./gradlew clean ktfmtCheck test build

      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: api-jar
          path: backend/api/build/libs/api-all.jar

  build-container-image:
    name: "Build Container Image"
    runs-on: ubuntu-latest
    needs: [ build-backend, build-frontend, e2e-tests ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download jar
        uses: actions/download-artifact@v4
        with:
          name: api-jar
          path: ./backend/api/build/libs
      - name: Download dist
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: ./frontend/app/dist

      - name: Login to ghcr.io
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Buildah Action
        id: build_image
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.IMAGE_NAME }}
          tags: ${{ env.IMAGE_TAGS }}
          containerfiles: |
            ./Containerfile

      - name: Echo outputs
        run: |
          echo "${{ toJSON(steps.build_image) }}"

      - name: Push To GHCR
        uses: redhat-actions/push-to-registry@v2
        id: push
        with:
          image: ${{ steps.build_image.outputs.image }}
          tags: ${{ steps.build_image.outputs.tags }}
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
          extra-args: |
            --disable-content-trust

      - name: Echo outputs
        run: |
          echo "${{ toJSON(steps.push.outputs) }}"

  deploy:
    name: "Deploy"
    runs-on: ubuntu-latest
    needs: [ build-container-image ]
    outputs:
      url: ${{ steps.deploy_step.outputs.url }}
    steps:
      - name: Install Curl
        run: sudo apt-get install -y curl

      - name: Deploy by calling API
        id: deploy_step
        run: | 
          response=$(curl -X POST https://corewar-deployment.schnelle.dev/deployments/${{ github.ref_name }} -H "Authorization: Bearer ${{ secrets.DEPLOYMENT_TOKEN }}")
          echo $response
          deployment_url=$(echo $response | jq -r '.url')
          echo "url=$deployment_url" >> $GITHUB_OUTPUT

  declare_environment:
    name: "Declare environment"
    runs-on: ubuntu-latest
    needs: [ deploy ]
    environment: 
      name: ${{ github.ref_name }}
      url: ${{ needs.deploy.outputs.url }}
    steps:
      - name: Deployed URL
        run: | 
          echo "Deployed URL: ${{ needs.deploy.outputs.url }}"
