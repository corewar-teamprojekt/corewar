openapi: "3.1.0"
info:
  title: "corewar API"
  description: "corewar API"
  version: "1.0.0"
servers:
- url: "/"
paths:
  /api/v0/code/{player}:
    post:
      description: "Stores the program of a given player in current v0Lobby, creates\
        \ that lobby if there is no current v0Lobby. <br> <br> <br> Path Parameter\
        \ - {player}: The name of the player whose code is being submitted. For this\
        \ endpoint ONLY 'playerA' and 'playerB' are valid! <br> Body: The program\
        \ of the player, in plain text <br> <br> <br> Response 200: The game will\
        \ automatically start once the second player has submitted. <br> Response\
        \ 400: Game is in `RUNNING` state or a player still has to submit code. <br>\
        \ The message field contains an explanation of what went wrong. <br> `{ <br>\
        \ \"message\": String, <br> }`"
      parameters:
        - name: "player"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          text/plain:
            schema:
              type: "string"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "object"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/v0/status:
    get:
      description: "Returns either the status of the current game, or the status /\
        \ result of the last game if there is no currently active game. <br> playerXSubmitted\
        \ will only be true if code for player X has been submitted <br> result will\
        \ only be valid when gameState is FINISHED <br> playerXSubmitted will switch\
        \ back to false once the gameState switches to FINISHED"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Status"
components:
  schemas:
    Result:
      type: "object"
      properties:
        winner:
          type: "string"
          enum:
          - "A"
          - "B"
          - "UNDECIDED"
      required:
      - "winner"
    Status:
      type: "object"
      properties:
        playerASubmitted:
          type: "boolean"
        playerBSubmitted:
          type: "boolean"
        gameState:
          type: "string"
          enum:
          - "NOT_STARTED"
          - "RUNNING"
          - "FINISHED"
        result:
          $ref: "#/components/schemas/Result"
      required:
      - "gameState"
      - "result"